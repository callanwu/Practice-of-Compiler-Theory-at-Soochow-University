Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> function
Rule 8     statement -> run_function
Rule 9     statement -> class
Rule 10    assignment -> VARIABLE = NUMBER
Rule 11    assignment -> VARIABLE [ expression ] = NUMBER
Rule 12    assignment -> VARIABLE = VARIABLE
Rule 13    assignment -> VARIABLE = VARIABLE [ expression ]
Rule 14    assignment -> self = VARIABLE
Rule 15    assignment -> VARIABLE = VARIABLE ( expressions )
Rule 16    self -> SELF . VARIABLE
Rule 17    operation -> VARIABLE = expression
Rule 18    operation -> VARIABLE + = expression
Rule 19    operation -> VARIABLE - = expression
Rule 20    operation -> VARIABLE [ expression ] = expression
Rule 21    operation -> self = expression
Rule 22    expression -> expression + term
Rule 23    expression -> expression - term
Rule 24    expression -> term
Rule 25    term -> term * factor
Rule 26    term -> term / factor
Rule 27    term -> factor
Rule 28    factor -> NUMBER
Rule 29    factor -> VARIABLE
Rule 30    factor -> STR
Rule 31    factor -> self
Rule 32    factor -> VARIABLE [ expression ]
Rule 33    factor -> ( expression )
Rule 34    print -> PRINT ( variables )
Rule 35    function -> DEF VARIABLE ( variables ) { statements }
Rule 36    function -> DEF VARIABLE ( SELF ) { statements }
Rule 37    function -> DEF VARIABLE ( SELF , variables ) { statements }
Rule 38    run_function -> VARIABLE ( expressions )
Rule 39    run_function -> VARIABLE . VARIABLE ( expressions )
Rule 40    variables -> <empty>
Rule 41    variables -> VARIABLE
Rule 42    variables -> variables , VARIABLE
Rule 43    variables -> self
Rule 44    variables -> variables , self
Rule 45    expressions -> <empty>
Rule 46    expressions -> expression
Rule 47    expressions -> expressions , expression
Rule 48    class -> CLASS VARIABLE { statements }

Terminals, with rules where they appear

(                    : 15 33 34 35 36 37 38 39
)                    : 15 33 34 35 36 37 38 39
*                    : 25
+                    : 18 22
,                    : 37 42 44 47
-                    : 19 23
.                    : 16 39
/                    : 26
=                    : 10 11 12 13 14 15 17 18 19 20 21
CLASS                : 48
DEF                  : 35 36 37
NUMBER               : 10 11 28
PRINT                : 34
SELF                 : 16 36 37
STR                  : 30
VARIABLE             : 10 11 12 12 13 13 14 15 15 16 17 18 19 20 29 32 35 36 37 38 39 39 41 42 48
[                    : 11 13 20 32
]                    : 11 13 20 32
error                : 
{                    : 35 36 37 48
}                    : 35 36 37 48

Nonterminals, with rules where they appear

assignment           : 4
class                : 9
expression           : 11 13 17 18 19 20 20 21 22 23 32 33 46 47
expressions          : 15 38 39 47
factor               : 25 26 27
function             : 7
operation            : 5
print                : 6
program              : 0
run_function         : 8
self                 : 14 21 31 43 44
statement            : 2 3
statements           : 1 2 35 36 37 48
term                 : 22 23 24 25 26
variables            : 34 35 37 42 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    statements                     shift and go to state 1
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    program                        shift and go to state 7
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 1

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    statement                      shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 2

    (8) statement -> run_function .

    }               reduce using rule 8 (statement -> run_function .)
    VARIABLE        reduce using rule 8 (statement -> run_function .)
    PRINT           reduce using rule 8 (statement -> run_function .)
    DEF             reduce using rule 8 (statement -> run_function .)
    CLASS           reduce using rule 8 (statement -> run_function .)
    SELF            reduce using rule 8 (statement -> run_function .)
    $end            reduce using rule 8 (statement -> run_function .)


state 3

    (34) print -> PRINT . ( variables )

    (               shift and go to state 17


state 4

    (5) statement -> operation .

    }               reduce using rule 5 (statement -> operation .)
    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    CLASS           reduce using rule 5 (statement -> operation .)
    SELF            reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)


state 5

    (35) function -> DEF . VARIABLE ( variables ) { statements }
    (36) function -> DEF . VARIABLE ( SELF ) { statements }
    (37) function -> DEF . VARIABLE ( SELF , variables ) { statements }

    VARIABLE        shift and go to state 18


state 6

    (14) assignment -> self . = VARIABLE
    (21) operation -> self . = expression

    =               shift and go to state 19


state 7

    (0) S' -> program .



state 8

    (3) statements -> statement .

    }               reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    SELF            reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 9

    (6) statement -> print .

    }               reduce using rule 6 (statement -> print .)
    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    CLASS           reduce using rule 6 (statement -> print .)
    SELF            reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)


state 10

    (48) class -> CLASS . VARIABLE { statements }

    VARIABLE        shift and go to state 20


state 11

    (7) statement -> function .

    }               reduce using rule 7 (statement -> function .)
    VARIABLE        reduce using rule 7 (statement -> function .)
    PRINT           reduce using rule 7 (statement -> function .)
    DEF             reduce using rule 7 (statement -> function .)
    CLASS           reduce using rule 7 (statement -> function .)
    SELF            reduce using rule 7 (statement -> function .)
    $end            reduce using rule 7 (statement -> function .)


state 12

    (4) statement -> assignment .

    }               reduce using rule 4 (statement -> assignment .)
    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    CLASS           reduce using rule 4 (statement -> assignment .)
    SELF            reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 13

    (10) assignment -> VARIABLE . = NUMBER
    (11) assignment -> VARIABLE . [ expression ] = NUMBER
    (12) assignment -> VARIABLE . = VARIABLE
    (13) assignment -> VARIABLE . = VARIABLE [ expression ]
    (15) assignment -> VARIABLE . = VARIABLE ( expressions )
    (17) operation -> VARIABLE . = expression
    (18) operation -> VARIABLE . + = expression
    (19) operation -> VARIABLE . - = expression
    (20) operation -> VARIABLE . [ expression ] = expression
    (38) run_function -> VARIABLE . ( expressions )
    (39) run_function -> VARIABLE . . VARIABLE ( expressions )

    =               shift and go to state 21
    [               shift and go to state 26
    +               shift and go to state 22
    -               shift and go to state 23
    (               shift and go to state 25
    .               shift and go to state 24


state 14

    (9) statement -> class .

    }               reduce using rule 9 (statement -> class .)
    VARIABLE        reduce using rule 9 (statement -> class .)
    PRINT           reduce using rule 9 (statement -> class .)
    DEF             reduce using rule 9 (statement -> class .)
    CLASS           reduce using rule 9 (statement -> class .)
    SELF            reduce using rule 9 (statement -> class .)
    $end            reduce using rule 9 (statement -> class .)


state 15

    (16) self -> SELF . . VARIABLE

    .               shift and go to state 27


state 16

    (2) statements -> statements statement .

    }               reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    SELF            reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 17

    (34) print -> PRINT ( . variables )
    (40) variables -> .
    (41) variables -> . VARIABLE
    (42) variables -> . variables , VARIABLE
    (43) variables -> . self
    (44) variables -> . variables , self
    (16) self -> . SELF . VARIABLE

    )               reduce using rule 40 (variables -> .)
    ,               reduce using rule 40 (variables -> .)
    VARIABLE        shift and go to state 29
    SELF            shift and go to state 15

    variables                      shift and go to state 28
    self                           shift and go to state 30

state 18

    (35) function -> DEF VARIABLE . ( variables ) { statements }
    (36) function -> DEF VARIABLE . ( SELF ) { statements }
    (37) function -> DEF VARIABLE . ( SELF , variables ) { statements }

    (               shift and go to state 31


state 19

    (14) assignment -> self = . VARIABLE
    (21) operation -> self = . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 38
    NUMBER          shift and go to state 34
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expression                     shift and go to state 39
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 20

    (48) class -> CLASS VARIABLE . { statements }

    {               shift and go to state 40


state 21

    (10) assignment -> VARIABLE = . NUMBER
    (12) assignment -> VARIABLE = . VARIABLE
    (13) assignment -> VARIABLE = . VARIABLE [ expression ]
    (15) assignment -> VARIABLE = . VARIABLE ( expressions )
    (17) operation -> VARIABLE = . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 41
    VARIABLE        shift and go to state 42
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expression                     shift and go to state 43
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 22

    (18) operation -> VARIABLE + . = expression

    =               shift and go to state 44


state 23

    (19) operation -> VARIABLE - . = expression

    =               shift and go to state 45


state 24

    (39) run_function -> VARIABLE . . VARIABLE ( expressions )

    VARIABLE        shift and go to state 46


state 25

    (38) run_function -> VARIABLE ( . expressions )
    (45) expressions -> .
    (46) expressions -> . expression
    (47) expressions -> . expressions , expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    )               reduce using rule 45 (expressions -> .)
    ,               reduce using rule 45 (expressions -> .)
    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expressions                    shift and go to state 48
    expression                     shift and go to state 49
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 26

    (11) assignment -> VARIABLE [ . expression ] = NUMBER
    (20) operation -> VARIABLE [ . expression ] = expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 50
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 27

    (16) self -> SELF . . VARIABLE

    VARIABLE        shift and go to state 51


state 28

    (34) print -> PRINT ( variables . )
    (42) variables -> variables . , VARIABLE
    (44) variables -> variables . , self

    )               shift and go to state 52
    ,               shift and go to state 53


state 29

    (41) variables -> VARIABLE .

    )               reduce using rule 41 (variables -> VARIABLE .)
    ,               reduce using rule 41 (variables -> VARIABLE .)


state 30

    (43) variables -> self .

    )               reduce using rule 43 (variables -> self .)
    ,               reduce using rule 43 (variables -> self .)


state 31

    (35) function -> DEF VARIABLE ( . variables ) { statements }
    (36) function -> DEF VARIABLE ( . SELF ) { statements }
    (37) function -> DEF VARIABLE ( . SELF , variables ) { statements }
    (40) variables -> .
    (41) variables -> . VARIABLE
    (42) variables -> . variables , VARIABLE
    (43) variables -> . self
    (44) variables -> . variables , self
    (16) self -> . SELF . VARIABLE

    SELF            shift and go to state 55
    )               reduce using rule 40 (variables -> .)
    ,               reduce using rule 40 (variables -> .)
    VARIABLE        shift and go to state 29

    variables                      shift and go to state 54
    self                           shift and go to state 30

state 32

    (24) expression -> term .
    (25) term -> term . * factor
    (26) term -> term . / factor

    +               reduce using rule 24 (expression -> term .)
    -               reduce using rule 24 (expression -> term .)
    VARIABLE        reduce using rule 24 (expression -> term .)
    PRINT           reduce using rule 24 (expression -> term .)
    DEF             reduce using rule 24 (expression -> term .)
    CLASS           reduce using rule 24 (expression -> term .)
    SELF            reduce using rule 24 (expression -> term .)
    $end            reduce using rule 24 (expression -> term .)
    }               reduce using rule 24 (expression -> term .)
    )               reduce using rule 24 (expression -> term .)
    ]               reduce using rule 24 (expression -> term .)
    ,               reduce using rule 24 (expression -> term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 33

    (31) factor -> self .

    *               reduce using rule 31 (factor -> self .)
    /               reduce using rule 31 (factor -> self .)
    +               reduce using rule 31 (factor -> self .)
    -               reduce using rule 31 (factor -> self .)
    VARIABLE        reduce using rule 31 (factor -> self .)
    PRINT           reduce using rule 31 (factor -> self .)
    DEF             reduce using rule 31 (factor -> self .)
    CLASS           reduce using rule 31 (factor -> self .)
    SELF            reduce using rule 31 (factor -> self .)
    $end            reduce using rule 31 (factor -> self .)
    }               reduce using rule 31 (factor -> self .)
    )               reduce using rule 31 (factor -> self .)
    ,               reduce using rule 31 (factor -> self .)
    ]               reduce using rule 31 (factor -> self .)


state 34

    (28) factor -> NUMBER .

    *               reduce using rule 28 (factor -> NUMBER .)
    /               reduce using rule 28 (factor -> NUMBER .)
    +               reduce using rule 28 (factor -> NUMBER .)
    -               reduce using rule 28 (factor -> NUMBER .)
    VARIABLE        reduce using rule 28 (factor -> NUMBER .)
    PRINT           reduce using rule 28 (factor -> NUMBER .)
    DEF             reduce using rule 28 (factor -> NUMBER .)
    CLASS           reduce using rule 28 (factor -> NUMBER .)
    SELF            reduce using rule 28 (factor -> NUMBER .)
    $end            reduce using rule 28 (factor -> NUMBER .)
    }               reduce using rule 28 (factor -> NUMBER .)
    )               reduce using rule 28 (factor -> NUMBER .)
    ,               reduce using rule 28 (factor -> NUMBER .)
    ]               reduce using rule 28 (factor -> NUMBER .)


state 35

    (33) factor -> ( . expression )
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 58
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 36

    (30) factor -> STR .

    *               reduce using rule 30 (factor -> STR .)
    /               reduce using rule 30 (factor -> STR .)
    +               reduce using rule 30 (factor -> STR .)
    -               reduce using rule 30 (factor -> STR .)
    VARIABLE        reduce using rule 30 (factor -> STR .)
    PRINT           reduce using rule 30 (factor -> STR .)
    DEF             reduce using rule 30 (factor -> STR .)
    CLASS           reduce using rule 30 (factor -> STR .)
    SELF            reduce using rule 30 (factor -> STR .)
    $end            reduce using rule 30 (factor -> STR .)
    }               reduce using rule 30 (factor -> STR .)
    )               reduce using rule 30 (factor -> STR .)
    ,               reduce using rule 30 (factor -> STR .)
    ]               reduce using rule 30 (factor -> STR .)


state 37

    (27) term -> factor .

    *               reduce using rule 27 (term -> factor .)
    /               reduce using rule 27 (term -> factor .)
    +               reduce using rule 27 (term -> factor .)
    -               reduce using rule 27 (term -> factor .)
    VARIABLE        reduce using rule 27 (term -> factor .)
    PRINT           reduce using rule 27 (term -> factor .)
    DEF             reduce using rule 27 (term -> factor .)
    CLASS           reduce using rule 27 (term -> factor .)
    SELF            reduce using rule 27 (term -> factor .)
    $end            reduce using rule 27 (term -> factor .)
    }               reduce using rule 27 (term -> factor .)
    ]               reduce using rule 27 (term -> factor .)
    )               reduce using rule 27 (term -> factor .)
    ,               reduce using rule 27 (term -> factor .)


state 38

    (14) assignment -> self = VARIABLE .
    (29) factor -> VARIABLE .
    (32) factor -> VARIABLE . [ expression ]

  ! reduce/reduce conflict for VARIABLE resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for PRINT resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for DEF resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for CLASS resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for SELF resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 14 (assignment -> self = VARIABLE .)
  ! reduce/reduce conflict for } resolved using rule 14 (assignment -> self = VARIABLE .)
    }               reduce using rule 14 (assignment -> self = VARIABLE .)
    VARIABLE        reduce using rule 14 (assignment -> self = VARIABLE .)
    PRINT           reduce using rule 14 (assignment -> self = VARIABLE .)
    DEF             reduce using rule 14 (assignment -> self = VARIABLE .)
    CLASS           reduce using rule 14 (assignment -> self = VARIABLE .)
    SELF            reduce using rule 14 (assignment -> self = VARIABLE .)
    $end            reduce using rule 14 (assignment -> self = VARIABLE .)
    *               reduce using rule 29 (factor -> VARIABLE .)
    /               reduce using rule 29 (factor -> VARIABLE .)
    +               reduce using rule 29 (factor -> VARIABLE .)
    -               reduce using rule 29 (factor -> VARIABLE .)
    [               shift and go to state 59

  ! VARIABLE        [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! PRINT           [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! DEF             [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! CLASS           [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! SELF            [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! }               [ reduce using rule 29 (factor -> VARIABLE .) ]


state 39

    (21) operation -> self = expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    VARIABLE        reduce using rule 21 (operation -> self = expression .)
    PRINT           reduce using rule 21 (operation -> self = expression .)
    DEF             reduce using rule 21 (operation -> self = expression .)
    CLASS           reduce using rule 21 (operation -> self = expression .)
    SELF            reduce using rule 21 (operation -> self = expression .)
    $end            reduce using rule 21 (operation -> self = expression .)
    }               reduce using rule 21 (operation -> self = expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 40

    (48) class -> CLASS VARIABLE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    statements                     shift and go to state 62
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 41

    (10) assignment -> VARIABLE = NUMBER .
    (28) factor -> NUMBER .

  ! reduce/reduce conflict for VARIABLE resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for DEF resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for CLASS resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for SELF resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for } resolved using rule 10 (assignment -> VARIABLE = NUMBER .)
    }               reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    DEF             reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    CLASS           reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    SELF            reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 10 (assignment -> VARIABLE = NUMBER .)
    *               reduce using rule 28 (factor -> NUMBER .)
    /               reduce using rule 28 (factor -> NUMBER .)
    +               reduce using rule 28 (factor -> NUMBER .)
    -               reduce using rule 28 (factor -> NUMBER .)

  ! VARIABLE        [ reduce using rule 28 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 28 (factor -> NUMBER .) ]
  ! DEF             [ reduce using rule 28 (factor -> NUMBER .) ]
  ! CLASS           [ reduce using rule 28 (factor -> NUMBER .) ]
  ! SELF            [ reduce using rule 28 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 28 (factor -> NUMBER .) ]
  ! }               [ reduce using rule 28 (factor -> NUMBER .) ]


state 42

    (12) assignment -> VARIABLE = VARIABLE .
    (13) assignment -> VARIABLE = VARIABLE . [ expression ]
    (15) assignment -> VARIABLE = VARIABLE . ( expressions )
    (29) factor -> VARIABLE .
    (32) factor -> VARIABLE . [ expression ]

  ! reduce/reduce conflict for VARIABLE resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for PRINT resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for DEF resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for CLASS resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for SELF resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
  ! reduce/reduce conflict for } resolved using rule 12 (assignment -> VARIABLE = VARIABLE .)
    }               reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    VARIABLE        reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    PRINT           reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    DEF             reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    CLASS           reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    SELF            reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    $end            reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    [               shift and go to state 64
    (               shift and go to state 63
    *               reduce using rule 29 (factor -> VARIABLE .)
    /               reduce using rule 29 (factor -> VARIABLE .)
    +               reduce using rule 29 (factor -> VARIABLE .)
    -               reduce using rule 29 (factor -> VARIABLE .)

  ! VARIABLE        [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! PRINT           [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! DEF             [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! CLASS           [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! SELF            [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 29 (factor -> VARIABLE .) ]
  ! }               [ reduce using rule 29 (factor -> VARIABLE .) ]


state 43

    (17) operation -> VARIABLE = expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    VARIABLE        reduce using rule 17 (operation -> VARIABLE = expression .)
    PRINT           reduce using rule 17 (operation -> VARIABLE = expression .)
    DEF             reduce using rule 17 (operation -> VARIABLE = expression .)
    CLASS           reduce using rule 17 (operation -> VARIABLE = expression .)
    SELF            reduce using rule 17 (operation -> VARIABLE = expression .)
    $end            reduce using rule 17 (operation -> VARIABLE = expression .)
    }               reduce using rule 17 (operation -> VARIABLE = expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 44

    (18) operation -> VARIABLE + = . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 65
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 45

    (19) operation -> VARIABLE - = . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 66
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 46

    (39) run_function -> VARIABLE . VARIABLE . ( expressions )

    (               shift and go to state 67


state 47

    (29) factor -> VARIABLE .
    (32) factor -> VARIABLE . [ expression ]

    *               reduce using rule 29 (factor -> VARIABLE .)
    /               reduce using rule 29 (factor -> VARIABLE .)
    +               reduce using rule 29 (factor -> VARIABLE .)
    -               reduce using rule 29 (factor -> VARIABLE .)
    )               reduce using rule 29 (factor -> VARIABLE .)
    ,               reduce using rule 29 (factor -> VARIABLE .)
    ]               reduce using rule 29 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 29 (factor -> VARIABLE .)
    PRINT           reduce using rule 29 (factor -> VARIABLE .)
    DEF             reduce using rule 29 (factor -> VARIABLE .)
    CLASS           reduce using rule 29 (factor -> VARIABLE .)
    SELF            reduce using rule 29 (factor -> VARIABLE .)
    $end            reduce using rule 29 (factor -> VARIABLE .)
    }               reduce using rule 29 (factor -> VARIABLE .)
    [               shift and go to state 59


state 48

    (38) run_function -> VARIABLE ( expressions . )
    (47) expressions -> expressions . , expression

    )               shift and go to state 68
    ,               shift and go to state 69


state 49

    (46) expressions -> expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    )               reduce using rule 46 (expressions -> expression .)
    ,               reduce using rule 46 (expressions -> expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 50

    (11) assignment -> VARIABLE [ expression . ] = NUMBER
    (20) operation -> VARIABLE [ expression . ] = expression
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    ]               shift and go to state 70
    +               shift and go to state 61
    -               shift and go to state 60


state 51

    (16) self -> SELF . VARIABLE .

    )               reduce using rule 16 (self -> SELF . VARIABLE .)
    ,               reduce using rule 16 (self -> SELF . VARIABLE .)
    =               reduce using rule 16 (self -> SELF . VARIABLE .)
    *               reduce using rule 16 (self -> SELF . VARIABLE .)
    /               reduce using rule 16 (self -> SELF . VARIABLE .)
    +               reduce using rule 16 (self -> SELF . VARIABLE .)
    -               reduce using rule 16 (self -> SELF . VARIABLE .)
    ]               reduce using rule 16 (self -> SELF . VARIABLE .)
    VARIABLE        reduce using rule 16 (self -> SELF . VARIABLE .)
    PRINT           reduce using rule 16 (self -> SELF . VARIABLE .)
    DEF             reduce using rule 16 (self -> SELF . VARIABLE .)
    CLASS           reduce using rule 16 (self -> SELF . VARIABLE .)
    SELF            reduce using rule 16 (self -> SELF . VARIABLE .)
    $end            reduce using rule 16 (self -> SELF . VARIABLE .)
    }               reduce using rule 16 (self -> SELF . VARIABLE .)


state 52

    (34) print -> PRINT ( variables ) .

    }               reduce using rule 34 (print -> PRINT ( variables ) .)
    VARIABLE        reduce using rule 34 (print -> PRINT ( variables ) .)
    PRINT           reduce using rule 34 (print -> PRINT ( variables ) .)
    DEF             reduce using rule 34 (print -> PRINT ( variables ) .)
    CLASS           reduce using rule 34 (print -> PRINT ( variables ) .)
    SELF            reduce using rule 34 (print -> PRINT ( variables ) .)
    $end            reduce using rule 34 (print -> PRINT ( variables ) .)


state 53

    (42) variables -> variables , . VARIABLE
    (44) variables -> variables , . self
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 72
    SELF            shift and go to state 15

    self                           shift and go to state 71

state 54

    (35) function -> DEF VARIABLE ( variables . ) { statements }
    (42) variables -> variables . , VARIABLE
    (44) variables -> variables . , self

    )               shift and go to state 73
    ,               shift and go to state 53


state 55

    (36) function -> DEF VARIABLE ( SELF . ) { statements }
    (37) function -> DEF VARIABLE ( SELF . , variables ) { statements }
    (16) self -> SELF . . VARIABLE

    )               shift and go to state 74
    ,               shift and go to state 75
    .               shift and go to state 27


state 56

    (25) term -> term * . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    factor                         shift and go to state 76

state 57

    (26) term -> term / . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    factor                         shift and go to state 77

state 58

    (33) factor -> ( expression . )
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    )               shift and go to state 78
    +               shift and go to state 61
    -               shift and go to state 60


state 59

    (32) factor -> VARIABLE [ . expression ]
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 79
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 60

    (23) expression -> expression - . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 80
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 61

    (22) expression -> expression + . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 81
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 62

    (48) class -> CLASS VARIABLE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    }               shift and go to state 82
    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    statement                      shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 63

    (15) assignment -> VARIABLE = VARIABLE ( . expressions )
    (45) expressions -> .
    (46) expressions -> . expression
    (47) expressions -> . expressions , expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    )               reduce using rule 45 (expressions -> .)
    ,               reduce using rule 45 (expressions -> .)
    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expressions                    shift and go to state 83
    expression                     shift and go to state 49
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 64

    (13) assignment -> VARIABLE = VARIABLE [ . expression ]
    (32) factor -> VARIABLE [ . expression ]
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 84
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 65

    (18) operation -> VARIABLE + = expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    VARIABLE        reduce using rule 18 (operation -> VARIABLE + = expression .)
    PRINT           reduce using rule 18 (operation -> VARIABLE + = expression .)
    DEF             reduce using rule 18 (operation -> VARIABLE + = expression .)
    CLASS           reduce using rule 18 (operation -> VARIABLE + = expression .)
    SELF            reduce using rule 18 (operation -> VARIABLE + = expression .)
    $end            reduce using rule 18 (operation -> VARIABLE + = expression .)
    }               reduce using rule 18 (operation -> VARIABLE + = expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 66

    (19) operation -> VARIABLE - = expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    VARIABLE        reduce using rule 19 (operation -> VARIABLE - = expression .)
    PRINT           reduce using rule 19 (operation -> VARIABLE - = expression .)
    DEF             reduce using rule 19 (operation -> VARIABLE - = expression .)
    CLASS           reduce using rule 19 (operation -> VARIABLE - = expression .)
    SELF            reduce using rule 19 (operation -> VARIABLE - = expression .)
    $end            reduce using rule 19 (operation -> VARIABLE - = expression .)
    }               reduce using rule 19 (operation -> VARIABLE - = expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 67

    (39) run_function -> VARIABLE . VARIABLE ( . expressions )
    (45) expressions -> .
    (46) expressions -> . expression
    (47) expressions -> . expressions , expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    )               reduce using rule 45 (expressions -> .)
    ,               reduce using rule 45 (expressions -> .)
    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expressions                    shift and go to state 85
    expression                     shift and go to state 49
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 68

    (38) run_function -> VARIABLE ( expressions ) .

    VARIABLE        reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    PRINT           reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    DEF             reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    CLASS           reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    SELF            reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    $end            reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)
    }               reduce using rule 38 (run_function -> VARIABLE ( expressions ) .)


state 69

    (47) expressions -> expressions , . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 34
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    self                           shift and go to state 33
    expression                     shift and go to state 86
    term                           shift and go to state 32
    factor                         shift and go to state 37

state 70

    (11) assignment -> VARIABLE [ expression ] . = NUMBER
    (20) operation -> VARIABLE [ expression ] . = expression

    =               shift and go to state 87


state 71

    (44) variables -> variables , self .

    )               reduce using rule 44 (variables -> variables , self .)
    ,               reduce using rule 44 (variables -> variables , self .)


state 72

    (42) variables -> variables , VARIABLE .

    )               reduce using rule 42 (variables -> variables , VARIABLE .)
    ,               reduce using rule 42 (variables -> variables , VARIABLE .)


state 73

    (35) function -> DEF VARIABLE ( variables ) . { statements }

    {               shift and go to state 88


state 74

    (36) function -> DEF VARIABLE ( SELF ) . { statements }

    {               shift and go to state 89


state 75

    (37) function -> DEF VARIABLE ( SELF , . variables ) { statements }
    (40) variables -> .
    (41) variables -> . VARIABLE
    (42) variables -> . variables , VARIABLE
    (43) variables -> . self
    (44) variables -> . variables , self
    (16) self -> . SELF . VARIABLE

    )               reduce using rule 40 (variables -> .)
    ,               reduce using rule 40 (variables -> .)
    VARIABLE        shift and go to state 29
    SELF            shift and go to state 15

    variables                      shift and go to state 90
    self                           shift and go to state 30

state 76

    (25) term -> term * factor .

    *               reduce using rule 25 (term -> term * factor .)
    /               reduce using rule 25 (term -> term * factor .)
    +               reduce using rule 25 (term -> term * factor .)
    -               reduce using rule 25 (term -> term * factor .)
    VARIABLE        reduce using rule 25 (term -> term * factor .)
    PRINT           reduce using rule 25 (term -> term * factor .)
    DEF             reduce using rule 25 (term -> term * factor .)
    CLASS           reduce using rule 25 (term -> term * factor .)
    SELF            reduce using rule 25 (term -> term * factor .)
    $end            reduce using rule 25 (term -> term * factor .)
    }               reduce using rule 25 (term -> term * factor .)
    ]               reduce using rule 25 (term -> term * factor .)
    )               reduce using rule 25 (term -> term * factor .)
    ,               reduce using rule 25 (term -> term * factor .)


state 77

    (26) term -> term / factor .

    *               reduce using rule 26 (term -> term / factor .)
    /               reduce using rule 26 (term -> term / factor .)
    +               reduce using rule 26 (term -> term / factor .)
    -               reduce using rule 26 (term -> term / factor .)
    VARIABLE        reduce using rule 26 (term -> term / factor .)
    PRINT           reduce using rule 26 (term -> term / factor .)
    DEF             reduce using rule 26 (term -> term / factor .)
    CLASS           reduce using rule 26 (term -> term / factor .)
    SELF            reduce using rule 26 (term -> term / factor .)
    $end            reduce using rule 26 (term -> term / factor .)
    }               reduce using rule 26 (term -> term / factor .)
    ]               reduce using rule 26 (term -> term / factor .)
    )               reduce using rule 26 (term -> term / factor .)
    ,               reduce using rule 26 (term -> term / factor .)


state 78

    (33) factor -> ( expression ) .

    *               reduce using rule 33 (factor -> ( expression ) .)
    /               reduce using rule 33 (factor -> ( expression ) .)
    +               reduce using rule 33 (factor -> ( expression ) .)
    -               reduce using rule 33 (factor -> ( expression ) .)
    VARIABLE        reduce using rule 33 (factor -> ( expression ) .)
    PRINT           reduce using rule 33 (factor -> ( expression ) .)
    DEF             reduce using rule 33 (factor -> ( expression ) .)
    CLASS           reduce using rule 33 (factor -> ( expression ) .)
    SELF            reduce using rule 33 (factor -> ( expression ) .)
    $end            reduce using rule 33 (factor -> ( expression ) .)
    }               reduce using rule 33 (factor -> ( expression ) .)
    )               reduce using rule 33 (factor -> ( expression ) .)
    ,               reduce using rule 33 (factor -> ( expression ) .)
    ]               reduce using rule 33 (factor -> ( expression ) .)


state 79

    (32) factor -> VARIABLE [ expression . ]
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    ]               shift and go to state 91
    +               shift and go to state 61
    -               shift and go to state 60


state 80

    (23) expression -> expression - term .
    (25) term -> term . * factor
    (26) term -> term . / factor

    +               reduce using rule 23 (expression -> expression - term .)
    -               reduce using rule 23 (expression -> expression - term .)
    VARIABLE        reduce using rule 23 (expression -> expression - term .)
    PRINT           reduce using rule 23 (expression -> expression - term .)
    DEF             reduce using rule 23 (expression -> expression - term .)
    CLASS           reduce using rule 23 (expression -> expression - term .)
    SELF            reduce using rule 23 (expression -> expression - term .)
    $end            reduce using rule 23 (expression -> expression - term .)
    }               reduce using rule 23 (expression -> expression - term .)
    )               reduce using rule 23 (expression -> expression - term .)
    ]               reduce using rule 23 (expression -> expression - term .)
    ,               reduce using rule 23 (expression -> expression - term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 81

    (22) expression -> expression + term .
    (25) term -> term . * factor
    (26) term -> term . / factor

    +               reduce using rule 22 (expression -> expression + term .)
    -               reduce using rule 22 (expression -> expression + term .)
    VARIABLE        reduce using rule 22 (expression -> expression + term .)
    PRINT           reduce using rule 22 (expression -> expression + term .)
    DEF             reduce using rule 22 (expression -> expression + term .)
    CLASS           reduce using rule 22 (expression -> expression + term .)
    SELF            reduce using rule 22 (expression -> expression + term .)
    $end            reduce using rule 22 (expression -> expression + term .)
    }               reduce using rule 22 (expression -> expression + term .)
    )               reduce using rule 22 (expression -> expression + term .)
    ]               reduce using rule 22 (expression -> expression + term .)
    ,               reduce using rule 22 (expression -> expression + term .)
    *               shift and go to state 56
    /               shift and go to state 57


state 82

    (48) class -> CLASS VARIABLE { statements } .

    }               reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    VARIABLE        reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    PRINT           reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    DEF             reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    CLASS           reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    SELF            reduce using rule 48 (class -> CLASS VARIABLE { statements } .)
    $end            reduce using rule 48 (class -> CLASS VARIABLE { statements } .)


state 83

    (15) assignment -> VARIABLE = VARIABLE ( expressions . )
    (47) expressions -> expressions . , expression

    )               shift and go to state 92
    ,               shift and go to state 69


state 84

    (13) assignment -> VARIABLE = VARIABLE [ expression . ]
    (32) factor -> VARIABLE [ expression . ]
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    ]               shift and go to state 93
    +               shift and go to state 61
    -               shift and go to state 60


state 85

    (39) run_function -> VARIABLE . VARIABLE ( expressions . )
    (47) expressions -> expressions . , expression

    )               shift and go to state 94
    ,               shift and go to state 69


state 86

    (47) expressions -> expressions , expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    )               reduce using rule 47 (expressions -> expressions , expression .)
    ,               reduce using rule 47 (expressions -> expressions , expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 87

    (11) assignment -> VARIABLE [ expression ] = . NUMBER
    (20) operation -> VARIABLE [ expression ] = . expression
    (22) expression -> . expression + term
    (23) expression -> . expression - term
    (24) expression -> . term
    (25) term -> . term * factor
    (26) term -> . term / factor
    (27) term -> . factor
    (28) factor -> . NUMBER
    (29) factor -> . VARIABLE
    (30) factor -> . STR
    (31) factor -> . self
    (32) factor -> . VARIABLE [ expression ]
    (33) factor -> . ( expression )
    (16) self -> . SELF . VARIABLE

    NUMBER          shift and go to state 95
    VARIABLE        shift and go to state 47
    STR             shift and go to state 36
    (               shift and go to state 35
    SELF            shift and go to state 15

    term                           shift and go to state 32
    expression                     shift and go to state 96
    self                           shift and go to state 33
    factor                         shift and go to state 37

state 88

    (35) function -> DEF VARIABLE ( variables ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    statements                     shift and go to state 97
    assignment                     shift and go to state 12
    class                          shift and go to state 14
    self                           shift and go to state 6
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 89

    (36) function -> DEF VARIABLE ( SELF ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    statements                     shift and go to state 98
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 90

    (37) function -> DEF VARIABLE ( SELF , variables . ) { statements }
    (42) variables -> variables . , VARIABLE
    (44) variables -> variables . , self

    )               shift and go to state 99
    ,               shift and go to state 53


state 91

    (32) factor -> VARIABLE [ expression ] .

    *               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    /               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    +               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    -               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    VARIABLE        reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    PRINT           reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    DEF             reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    CLASS           reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    SELF            reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    $end            reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    }               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    )               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    ,               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    ]               reduce using rule 32 (factor -> VARIABLE [ expression ] .)


state 92

    (15) assignment -> VARIABLE = VARIABLE ( expressions ) .

    }               reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    VARIABLE        reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    PRINT           reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    DEF             reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    CLASS           reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    SELF            reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)
    $end            reduce using rule 15 (assignment -> VARIABLE = VARIABLE ( expressions ) .)


state 93

    (13) assignment -> VARIABLE = VARIABLE [ expression ] .
    (32) factor -> VARIABLE [ expression ] .

  ! reduce/reduce conflict for VARIABLE resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for PRINT resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for DEF resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for CLASS resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for SELF resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for $end resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
  ! reduce/reduce conflict for } resolved using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    }               reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    VARIABLE        reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    PRINT           reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    DEF             reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    CLASS           reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    SELF            reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    $end            reduce using rule 13 (assignment -> VARIABLE = VARIABLE [ expression ] .)
    *               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    /               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    +               reduce using rule 32 (factor -> VARIABLE [ expression ] .)
    -               reduce using rule 32 (factor -> VARIABLE [ expression ] .)

  ! VARIABLE        [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! PRINT           [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! DEF             [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! CLASS           [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! SELF            [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! $end            [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]
  ! }               [ reduce using rule 32 (factor -> VARIABLE [ expression ] .) ]


state 94

    (39) run_function -> VARIABLE . VARIABLE ( expressions ) .

    VARIABLE        reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    PRINT           reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    DEF             reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    CLASS           reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    SELF            reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    $end            reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)
    }               reduce using rule 39 (run_function -> VARIABLE . VARIABLE ( expressions ) .)


state 95

    (11) assignment -> VARIABLE [ expression ] = NUMBER .
    (28) factor -> NUMBER .

  ! reduce/reduce conflict for VARIABLE resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for DEF resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for CLASS resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for SELF resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
  ! reduce/reduce conflict for } resolved using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    }               reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    VARIABLE        reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    PRINT           reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    DEF             reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    CLASS           reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    SELF            reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    $end            reduce using rule 11 (assignment -> VARIABLE [ expression ] = NUMBER .)
    *               reduce using rule 28 (factor -> NUMBER .)
    /               reduce using rule 28 (factor -> NUMBER .)
    +               reduce using rule 28 (factor -> NUMBER .)
    -               reduce using rule 28 (factor -> NUMBER .)

  ! VARIABLE        [ reduce using rule 28 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 28 (factor -> NUMBER .) ]
  ! DEF             [ reduce using rule 28 (factor -> NUMBER .) ]
  ! CLASS           [ reduce using rule 28 (factor -> NUMBER .) ]
  ! SELF            [ reduce using rule 28 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 28 (factor -> NUMBER .) ]
  ! }               [ reduce using rule 28 (factor -> NUMBER .) ]


state 96

    (20) operation -> VARIABLE [ expression ] = expression .
    (22) expression -> expression . + term
    (23) expression -> expression . - term

    VARIABLE        reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    PRINT           reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    DEF             reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    CLASS           reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    SELF            reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    $end            reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    }               reduce using rule 20 (operation -> VARIABLE [ expression ] = expression .)
    +               shift and go to state 61
    -               shift and go to state 60


state 97

    (35) function -> DEF VARIABLE ( variables ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    }               shift and go to state 100
    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    assignment                     shift and go to state 12
    class                          shift and go to state 14
    self                           shift and go to state 6
    statement                      shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 98

    (36) function -> DEF VARIABLE ( SELF ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    }               shift and go to state 101
    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    assignment                     shift and go to state 12
    self                           shift and go to state 6
    class                          shift and go to state 14
    statement                      shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 99

    (37) function -> DEF VARIABLE ( SELF , variables ) . { statements }

    {               shift and go to state 102


state 100

    (35) function -> DEF VARIABLE ( variables ) { statements } .

    }               reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    VARIABLE        reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    PRINT           reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    DEF             reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    CLASS           reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    SELF            reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)
    $end            reduce using rule 35 (function -> DEF VARIABLE ( variables ) { statements } .)


state 101

    (36) function -> DEF VARIABLE ( SELF ) { statements } .

    }               reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    VARIABLE        reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    PRINT           reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    DEF             reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    CLASS           reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    SELF            reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)
    $end            reduce using rule 36 (function -> DEF VARIABLE ( SELF ) { statements } .)


state 102

    (37) function -> DEF VARIABLE ( SELF , variables ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    statements                     shift and go to state 103
    assignment                     shift and go to state 12
    class                          shift and go to state 14
    self                           shift and go to state 6
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 103

    (37) function -> DEF VARIABLE ( SELF , variables ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . function
    (8) statement -> . run_function
    (9) statement -> . class
    (10) assignment -> . VARIABLE = NUMBER
    (11) assignment -> . VARIABLE [ expression ] = NUMBER
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = VARIABLE [ expression ]
    (14) assignment -> . self = VARIABLE
    (15) assignment -> . VARIABLE = VARIABLE ( expressions )
    (17) operation -> . VARIABLE = expression
    (18) operation -> . VARIABLE + = expression
    (19) operation -> . VARIABLE - = expression
    (20) operation -> . VARIABLE [ expression ] = expression
    (21) operation -> . self = expression
    (34) print -> . PRINT ( variables )
    (35) function -> . DEF VARIABLE ( variables ) { statements }
    (36) function -> . DEF VARIABLE ( SELF ) { statements }
    (37) function -> . DEF VARIABLE ( SELF , variables ) { statements }
    (38) run_function -> . VARIABLE ( expressions )
    (39) run_function -> . VARIABLE . VARIABLE ( expressions )
    (48) class -> . CLASS VARIABLE { statements }
    (16) self -> . SELF . VARIABLE

    }               shift and go to state 104
    VARIABLE        shift and go to state 13
    PRINT           shift and go to state 3
    DEF             shift and go to state 5
    CLASS           shift and go to state 10
    SELF            shift and go to state 15

    function                       shift and go to state 11
    assignment                     shift and go to state 12
    class                          shift and go to state 14
    self                           shift and go to state 6
    statement                      shift and go to state 16
    print                          shift and go to state 9
    operation                      shift and go to state 4
    run_function                   shift and go to state 2

state 104

    (37) function -> DEF VARIABLE ( SELF , variables ) { statements } .

    }               reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    VARIABLE        reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    PRINT           reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    DEF             reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    CLASS           reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    SELF            reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)
    $end            reduce using rule 37 (function -> DEF VARIABLE ( SELF , variables ) { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 38 resolved using rule (assignment -> self = VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 38
WARNING: reduce/reduce conflict in state 41 resolved using rule (assignment -> VARIABLE = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (assignment -> VARIABLE = VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 42
WARNING: reduce/reduce conflict in state 93 resolved using rule (assignment -> VARIABLE = VARIABLE [ expression ])
WARNING: rejected rule (factor -> VARIABLE [ expression ]) in state 93
WARNING: reduce/reduce conflict in state 95 resolved using rule (assignment -> VARIABLE [ expression ] = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 95
