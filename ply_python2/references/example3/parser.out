Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> while
Rule 9     assignment -> VARIABLE = NUMBER
Rule 10    operation -> VARIABLE = VARIABLE + VARIABLE
Rule 11    operation -> VARIABLE = VARIABLE - VARIABLE
Rule 12    print -> PRINT ( VARIABLE )
Rule 13    if -> IF ( condition ) { statements }
Rule 14    condition -> VARIABLE > VARIABLE
Rule 15    condition -> VARIABLE < VARIABLE
Rule 16    while -> WHILE ( condition ) { statements }

Terminals, with rules where they appear

(                    : 12 13 16
)                    : 12 13 16
+                    : 10
-                    : 11
<                    : 15
=                    : 9 10 11
>                    : 14
IF                   : 13
NUMBER               : 9
PRINT                : 12
VARIABLE             : 9 10 10 10 11 11 11 12 14 14 15 15
WHILE                : 16
error                : 
{                    : 13 16
}                    : 13 16

Nonterminals, with rules where they appear

assignment           : 4
condition            : 13 16
if                   : 7
operation            : 5
print                : 6
program              : 0
statement            : 2 3
statements           : 1 2 13 16
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    statements                     shift and go to state 1
    assignment                     shift and go to state 3
    while                          shift and go to state 6
    program                        shift and go to state 7
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 1

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    assignment                     shift and go to state 3
    while                          shift and go to state 6
    statement                      shift and go to state 13
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 2

    (12) print -> PRINT . ( VARIABLE )

    (               shift and go to state 14


state 3

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 4

    (16) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 15


state 5

    (9) assignment -> VARIABLE . = NUMBER
    (10) operation -> VARIABLE . = VARIABLE + VARIABLE
    (11) operation -> VARIABLE . = VARIABLE - VARIABLE

    =               shift and go to state 16


state 6

    (8) statement -> while .

    VARIABLE        reduce using rule 8 (statement -> while .)
    PRINT           reduce using rule 8 (statement -> while .)
    IF              reduce using rule 8 (statement -> while .)
    WHILE           reduce using rule 8 (statement -> while .)
    $end            reduce using rule 8 (statement -> while .)
    }               reduce using rule 8 (statement -> while .)


state 7

    (0) S' -> program .



state 8

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 9

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 10

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)


state 11

    (13) if -> IF . ( condition ) { statements }

    (               shift and go to state 17


state 12

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 13

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 14

    (12) print -> PRINT ( . VARIABLE )

    VARIABLE        shift and go to state 18


state 15

    (16) while -> WHILE ( . condition ) { statements }
    (14) condition -> . VARIABLE > VARIABLE
    (15) condition -> . VARIABLE < VARIABLE

    VARIABLE        shift and go to state 19

    condition                      shift and go to state 20

state 16

    (9) assignment -> VARIABLE = . NUMBER
    (10) operation -> VARIABLE = . VARIABLE + VARIABLE
    (11) operation -> VARIABLE = . VARIABLE - VARIABLE

    NUMBER          shift and go to state 22
    VARIABLE        shift and go to state 21


state 17

    (13) if -> IF ( . condition ) { statements }
    (14) condition -> . VARIABLE > VARIABLE
    (15) condition -> . VARIABLE < VARIABLE

    VARIABLE        shift and go to state 19

    condition                      shift and go to state 23

state 18

    (12) print -> PRINT ( VARIABLE . )

    )               shift and go to state 24


state 19

    (14) condition -> VARIABLE . > VARIABLE
    (15) condition -> VARIABLE . < VARIABLE

    >               shift and go to state 26
    <               shift and go to state 25


state 20

    (16) while -> WHILE ( condition . ) { statements }

    )               shift and go to state 27


state 21

    (10) operation -> VARIABLE = VARIABLE . + VARIABLE
    (11) operation -> VARIABLE = VARIABLE . - VARIABLE

    +               shift and go to state 29
    -               shift and go to state 28


state 22

    (9) assignment -> VARIABLE = NUMBER .

    }               reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    IF              reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    WHILE           reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 9 (assignment -> VARIABLE = NUMBER .)


state 23

    (13) if -> IF ( condition . ) { statements }

    )               shift and go to state 30


state 24

    (12) print -> PRINT ( VARIABLE ) .

    }               reduce using rule 12 (print -> PRINT ( VARIABLE ) .)
    VARIABLE        reduce using rule 12 (print -> PRINT ( VARIABLE ) .)
    PRINT           reduce using rule 12 (print -> PRINT ( VARIABLE ) .)
    IF              reduce using rule 12 (print -> PRINT ( VARIABLE ) .)
    WHILE           reduce using rule 12 (print -> PRINT ( VARIABLE ) .)
    $end            reduce using rule 12 (print -> PRINT ( VARIABLE ) .)


state 25

    (15) condition -> VARIABLE < . VARIABLE

    VARIABLE        shift and go to state 31


state 26

    (14) condition -> VARIABLE > . VARIABLE

    VARIABLE        shift and go to state 32


state 27

    (16) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 33


state 28

    (11) operation -> VARIABLE = VARIABLE - . VARIABLE

    VARIABLE        shift and go to state 34


state 29

    (10) operation -> VARIABLE = VARIABLE + . VARIABLE

    VARIABLE        shift and go to state 35


state 30

    (13) if -> IF ( condition ) . { statements }

    {               shift and go to state 36


state 31

    (15) condition -> VARIABLE < VARIABLE .

    )               reduce using rule 15 (condition -> VARIABLE < VARIABLE .)


state 32

    (14) condition -> VARIABLE > VARIABLE .

    )               reduce using rule 14 (condition -> VARIABLE > VARIABLE .)


state 33

    (16) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    statements                     shift and go to state 37
    assignment                     shift and go to state 3
    while                          shift and go to state 6
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 34

    (11) operation -> VARIABLE = VARIABLE - VARIABLE .

    VARIABLE        reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    PRINT           reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    IF              reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    WHILE           reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    $end            reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    }               reduce using rule 11 (operation -> VARIABLE = VARIABLE - VARIABLE .)


state 35

    (10) operation -> VARIABLE = VARIABLE + VARIABLE .

    VARIABLE        reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    PRINT           reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    IF              reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    WHILE           reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    $end            reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    }               reduce using rule 10 (operation -> VARIABLE = VARIABLE + VARIABLE .)


state 36

    (13) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    statements                     shift and go to state 38
    assignment                     shift and go to state 3
    while                          shift and go to state 6
    statement                      shift and go to state 8
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 37

    (16) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    }               shift and go to state 39
    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    assignment                     shift and go to state 3
    while                          shift and go to state 6
    statement                      shift and go to state 13
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 38

    (13) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) operation -> . VARIABLE = VARIABLE + VARIABLE
    (11) operation -> . VARIABLE = VARIABLE - VARIABLE
    (12) print -> . PRINT ( VARIABLE )
    (13) if -> . IF ( condition ) { statements }
    (16) while -> . WHILE ( condition ) { statements }

    }               shift and go to state 40
    VARIABLE        shift and go to state 5
    PRINT           shift and go to state 2
    IF              shift and go to state 11
    WHILE           shift and go to state 4

    assignment                     shift and go to state 3
    while                          shift and go to state 6
    statement                      shift and go to state 13
    print                          shift and go to state 9
    operation                      shift and go to state 10
    if                             shift and go to state 12

state 39

    (16) while -> WHILE ( condition ) { statements } .

    }               reduce using rule 16 (while -> WHILE ( condition ) { statements } .)
    VARIABLE        reduce using rule 16 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 16 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 16 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 16 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 16 (while -> WHILE ( condition ) { statements } .)


state 40

    (13) if -> IF ( condition ) { statements } .

    }               reduce using rule 13 (if -> IF ( condition ) { statements } .)
    VARIABLE        reduce using rule 13 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 13 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 13 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 13 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 13 (if -> IF ( condition ) { statements } .)

